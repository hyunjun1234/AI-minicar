#ifndef ESP32
#error This example runs on ESP32
#endif

#include <LDS_YDLIDAR_X3_PRO.h>

const uint8_t LDS_MOTOR_EN_PIN = 19; // ESP32 Dev Kit LiDAR enable pin
const uint8_t LDS_MOTOR_PWM_PIN = 15; // LiDAR motor speed control using PWM
#define LDS_MOTOR_PWM_FREQ    10000
#define LDS_MOTOR_PWM_BITS    11
#define LDS_MOTOR_PWM_CHANNEL    2 // ESP32 PWM channel for LiDAR motor speed control

const int IN1 = 19;
const int IN2 = 18;
const int ENA = 5;
const int IN3 = 33;
const int IN4 = 32;
const int ENB = 27;

int pwmValue = 255;


HardwareSerial LidarSerial(1); // TX 25, RX 26
LDS_YDLIDAR_X3_PRO lidar;

struct Lidarda {
  float dis;
  float an;
};

Lidarda obstacle[360];
int lidarLength = 0;
int flag = 0;

void handleObstacleAvoidance();
void adjustDirection();

void setup() {
  Serial.begin(115200);

  Serial.print("LiDAR model ");
  Serial.println(lidar.getModelName());

  Serial.print("LiDAR RX buffer size "); // default 128 hw + 256 sw
  Serial.print(LidarSerial.setRxBufferSize(1024)); // must be before .begin()

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  analogWrite(ENA, 0);   // PWM 초기화: 0으로 설정
  analogWrite(ENB, 0);   // PWM 초기화: 0으로 설정
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);

  uint32_t baud_rate = lidar.getSerialBaudRate();
  Serial.print(", baud rate ");
  Serial.println(baud_rate);
  // UART1 with TX=25, RX=26
  LidarSerial.begin(baud_rate, SERIAL_8N1, 26, 25);

  for (int i = 0; i < 360; i++) {
    obstacle[i].an = 0;
    obstacle[i].dis = 9999;
  }
  lidar.setScanPointCallback(lidar_scan_point_callback);
  lidar.setPacketCallback(lidar_packet_callback);
  lidar.setSerialWriteCallback(lidar_serial_write_callback);
  lidar.setSerialReadCallback(lidar_serial_read_callback);
  lidar.setMotorPinCallback(lidar_motor_pin_callback);
  lidar.init();

  LDS::result_t result = lidar.start();
  Serial.print("LiDAR start() result: ");
  Serial.println(lidar.resultCodeToString(result));

  if (result < 0)
    Serial.println("Is the LiDAR connected to ESP32?");
}

int lidar_serial_read_callback() {
  return LidarSerial.read();
}
size_t lidar_serial_write_callback(const uint8_t * buffer, size_t length) {
  return LidarSerial.write(buffer, length);
}

void lidar_scan_point_callback(float angle_deg, float distance_mm, float quality, bool scan_completed) {
  lidarLength = (int)angle_deg;
  /*static int i = 0;
    if ((i++ % 20 == 0) || scan_completed) {
    Serial.print(i);
    Serial.print(' ');
    Serial.print(distance_mm);
    Serial.print(' ');
    Serial.print(angle_deg);
    if (scan_completed)
      Serial.println('*');
    else
      Serial.println();
    }*/
  if (distance_mm > 1 && distance_mm < 1000) {
    if ((angle_deg > 270 && angle_deg < 360) || (angle_deg > 0 && angle_deg < 90)) {
      // Update obstacle data if an object is within safe distance
      obstacle[lidarLength].an = angle_deg;
      obstacle[lidarLength].dis = distance_mm;
      Serial.print(lidarLength);
      Serial.print(' ');
      Serial.print(distance_mm);
      Serial.print(' ');
      Serial.println(angle_deg);
    }
  }
}

void lidar_info_callback(LDS::info_t code, String info) {
  Serial.print("LiDAR info ");
  Serial.print(lidar.infoCodeToString(code));
  Serial.print(": ");
  Serial.println(info);
}

void lidar_error_callback(LDS::result_t code, String aux_info) {
  Serial.print("LiDAR error ");
  Serial.print(lidar.resultCodeToString(code));
  Serial.print(": ");
  Serial.println(aux_info);
}

void lidar_motor_pin_callback(float value, LDS::lds_pin_t lidar_pin) {
  int pin = (lidar_pin == LDS::LDS_MOTOR_EN_PIN) ?
            LDS_MOTOR_EN_PIN : LDS_MOTOR_PWM_PIN;

  if (value <= LDS::DIR_INPUT) {
    // Configure pin direction
    if (value == LDS::DIR_OUTPUT_PWM) {
      ledcSetup(LDS_MOTOR_PWM_CHANNEL, LDS_MOTOR_PWM_FREQ, LDS_MOTOR_PWM_BITS);
      ledcAttachPin(pin, LDS_MOTOR_PWM_CHANNEL);
    } else
      pinMode(pin, (value == LDS::DIR_INPUT) ? INPUT : OUTPUT);
    return;
  }

  if (value < LDS::VALUE_PWM) // set constant output
    digitalWrite(pin, (value == LDS::VALUE_HIGH) ? HIGH : LOW);
  else { // set PWM duty cycle
    int pwm_value = ((1 << LDS_MOTOR_PWM_BITS) - 1) * value;
    ledcWrite(LDS_MOTOR_PWM_CHANNEL, pwm_value);
  }
}

void lidar_packet_callback(uint8_t * packet, uint16_t length, bool scan_completed) {
  return;
}

void loop() {
  lidar.loop();
  handleObstacleAvoidance();
  adjustDirection();
}
void handleObstacleAvoidance() {
  int r = 0;
  int l = 0;
  for (int i = 0; i < 360; i++) {
    if (obstacle[i].an > 0 && obstacle[i].an < 90) {
      if (obstacle[i].dis > 1 && obstacle[i].dis < 1000) {
        //flag = 1;
        l++;
      }
    } else if (obstacle[i].an > 270 && obstacle[i].an < 360 ) {
      if (obstacle[i].dis > 1 && obstacle[i].dis < 1000) {
        //flag = 2;
        r++;
      }
    }
    obstacle[i].an = 0;
    obstacle[i].dis = 9999;
  }
  if (l > r) {
    flag = 1;
  } else if (r > l) {
    flag = 2;
  }
  l = 0;
  r = 0;
  Serial.println(flag);
}

void adjustDirection() {
  if (flag == 1) {
    left();
    delay(500);
    straight();
    delay(100);
    flag = 0;
    Serial.println("left");
    return;
  } else if (flag == 2) {
    right();
    delay(500);
    straight();
    delay(100);
    flag = 0;
    Serial.println("right");
    return;
  } else if (flag == 0) {
    straight();
    Serial.println("straight");
    return;
  }
}

void forward() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, pwmValue);
}

void backward() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, pwmValue);  // set speed (0~255) PWM Value
}

void stop() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
}

void right() {
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 255);
}

void left() {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, 255);
}

void straight() {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}
